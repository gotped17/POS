/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import beans.Student;
import database.DB_Access;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Gottl
 */
public class SchoolAdminGUI extends javax.swing.JFrame {
// <editor-fold defaultstate="collapsed" desc="instanzvariablen">

    private DB_Access dba;
    private Map<String, List<Student>> studentsByClass = new TreeMap<>();
    private List<Student> students = new ArrayList<>();
    private Map<Integer, String> gradesById = new TreeMap<>();
    private Map<String, Integer> grades = new TreeMap<>();
    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern("yyyy-MM-dd");
// </editor-fold>

    public SchoolAdminGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        plButtons = new javax.swing.JPanel();
        btConnection = new javax.swing.JButton();
        btImport = new javax.swing.JButton();
        btStop = new javax.swing.JButton();
        plMain = new javax.swing.JPanel();
        plCombobox = new javax.swing.JPanel();
        lbKlasse = new javax.swing.JLabel();
        cbKlassen = new javax.swing.JComboBox<>();
        plNav = new javax.swing.JPanel();
        btNew = new javax.swing.JButton();
        lbFiller = new javax.swing.JLabel();
        btFirst = new javax.swing.JButton();
        btPrev = new javax.swing.JButton();
        btNext = new javax.swing.JButton();
        btLast = new javax.swing.JButton();
        plInfo = new javax.swing.JPanel();
        lbCatno = new javax.swing.JLabel();
        tfCatno = new javax.swing.JTextField();
        lbClass = new javax.swing.JLabel();
        tfClass = new javax.swing.JTextField();
        lbFirstname = new javax.swing.JLabel();
        tfFirstname = new javax.swing.JTextField();
        lbSurname = new javax.swing.JLabel();
        tfSurname = new javax.swing.JTextField();
        lbDateOfBirth = new javax.swing.JLabel();
        tfDateOfBirth = new javax.swing.JTextField();
        lbAge = new javax.swing.JLabel();
        tfAge = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(400, 250));

        plButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btConnection.setText("Verbinden");
        btConnection.setActionCommand("connect");
        btConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnectionOperation(evt);
            }
        });
        plButtons.add(btConnection);

        btImport.setText("Importieren");
        btImport.setEnabled(false);
        btImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onLoadFile(evt);
            }
        });
        plButtons.add(btImport);

        btStop.setText("Beenden");
        btStop.setEnabled(false);
        btStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onClose(evt);
            }
        });
        plButtons.add(btStop);

        getContentPane().add(plButtons, java.awt.BorderLayout.PAGE_START);

        plMain.setLayout(new java.awt.BorderLayout());

        plCombobox.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        lbKlasse.setText("Klasse:");
        plCombobox.add(lbKlasse);

        cbKlassen.setEnabled(false);
        cbKlassen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onGradeChanged(evt);
            }
        });
        plCombobox.add(cbKlassen);

        plMain.add(plCombobox, java.awt.BorderLayout.PAGE_START);

        plNav.setLayout(new java.awt.GridBagLayout());

        btNew.setText("Neu");
        btNew.setEnabled(false);
        btNew.setPreferredSize(new java.awt.Dimension(72, 32));
        btNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNewEntry(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(btNew, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(lbFiller, gridBagConstraints);

        btFirst.setText("|<");
        btFirst.setActionCommand("first");
        btFirst.setEnabled(false);
        btFirst.setPreferredSize(new java.awt.Dimension(42, 36));
        btFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNavigate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(btFirst, gridBagConstraints);

        btPrev.setText("<");
        btPrev.setActionCommand("prev");
        btPrev.setEnabled(false);
        btPrev.setPreferredSize(new java.awt.Dimension(36, 36));
        btPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNavigate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(btPrev, gridBagConstraints);

        btNext.setText(">");
        btNext.setActionCommand("next");
        btNext.setEnabled(false);
        btNext.setPreferredSize(new java.awt.Dimension(36, 36));
        btNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNavigate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(btNext, gridBagConstraints);

        btLast.setText(">|");
        btLast.setActionCommand("last");
        btLast.setEnabled(false);
        btLast.setPreferredSize(new java.awt.Dimension(42, 36));
        btLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onNavigate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 0, 0);
        plNav.add(btLast, gridBagConstraints);

        plMain.add(plNav, java.awt.BorderLayout.PAGE_END);

        plInfo.setLayout(new java.awt.GridLayout(3, 4));

        lbCatno.setText("Kat-Nr.:");
        plInfo.add(lbCatno);

        tfCatno.setEnabled(false);
        plInfo.add(tfCatno);

        lbClass.setText("Klasse:");
        plInfo.add(lbClass);

        tfClass.setEnabled(false);
        tfClass.setPreferredSize(new java.awt.Dimension(64, 32));
        plInfo.add(tfClass);

        lbFirstname.setText("Vorname:");
        plInfo.add(lbFirstname);

        tfFirstname.setEnabled(false);
        plInfo.add(tfFirstname);

        lbSurname.setText("Nachname:");
        plInfo.add(lbSurname);

        tfSurname.setEnabled(false);
        plInfo.add(tfSurname);

        lbDateOfBirth.setText("Geb.dat:");
        plInfo.add(lbDateOfBirth);

        tfDateOfBirth.setEnabled(false);
        plInfo.add(tfDateOfBirth);

        lbAge.setText("Alter:");
        plInfo.add(lbAge);

        tfAge.setEnabled(false);
        plInfo.add(tfAge);

        plMain.add(plInfo, java.awt.BorderLayout.CENTER);

        getContentPane().add(plMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onConnectionOperation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnectionOperation
        try {
            if (evt.getActionCommand().equals("connect")) {
                dba = DB_Access.getInstance();
                btConnection.setText("Trennen");
                btConnection.setActionCommand("disconnect");
                toggleComps(true);
                loadStudents();
                fillComboBox();

            } else if (evt.getActionCommand().equals("disconnect")) {
                dba = null;
                btConnection.setActionCommand("connect");
                btConnection.setText("Verbinden");
                cbKlassen.removeAllItems();
                studentsByClass = new TreeMap<>();
                tfCatno.setText("");
                tfClass.setText("");
                tfFirstname.setText("");
                tfSurname.setText("");
                tfDateOfBirth.setText("");
                tfAge.setText("");
                cbKlassen.removeAllItems();
                toggleComps(false);
            }
        } catch (SQLException ex) {
            Logger.getLogger(SchoolAdminGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_onConnectionOperation

    private void onNewEntry(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNewEntry

        JFrame newFrame = new JFrame("Neuer Schueler");
        newFrame.setSize(430, 300);
        newFrame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        newFrame.setVisible(true);
        newFrame.add(new NewStudentGUI(this, newFrame));

    }//GEN-LAST:event_onNewEntry

    private void onNavigate(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onNavigate
        String action = evt.getActionCommand();
        String grade = cbKlassen.getSelectedItem().toString();
        List<Student> temp = studentsByClass.get(grade);
        int catno = Integer.parseInt(tfCatno.getText());
        btFirst.setEnabled(true);
        btPrev.setEnabled(true);
        btNext.setEnabled(true);
        btLast.setEnabled(true);

        switch (action) {
            case "first":
                setStudentInfo(temp.get(0));
                btFirst.setEnabled(false);
                btPrev.setEnabled(false);
                break;
            case "prev":
                for (Student student : temp) {
                    if (catno - 1 == student.getCatno()) {
                        setStudentInfo(temp.get(temp.indexOf(student)));
                        if (catno - 1 == 1) {
                            btFirst.setEnabled(false);
                            btPrev.setEnabled(false);
                        }
                    }
                }
                break;
            case "next":
                for (Student student : temp) {

                    if (catno + 1 == student.getCatno()) {
                        setStudentInfo(temp.get(temp.indexOf(student)));
                        if (catno + 1 == temp.size()) {
                            btNext.setEnabled(false);
                            btLast.setEnabled(false);
                        }
                    }
                }
                break;
            case "last":
                setStudentInfo(temp.get(temp.size() - 1));
                btNext.setEnabled(false);
                btLast.setEnabled(false);
                break;
            default:
                System.out.println("Error");
                break;
        }

    }//GEN-LAST:event_onNavigate

    private void onGradeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onGradeChanged
        if (cbKlassen.getSelectedItem() != null) {
            setStudentInfo(studentsByClass.get(cbKlassen.getSelectedItem().toString()).get(0));
            btFirst.setEnabled(false);
            btPrev.setEnabled(false);
            btNext.setEnabled(true);
            btLast.setEnabled(true);
        }

    }//GEN-LAST:event_onGradeChanged

    private void onLoadFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoadFile
        try {
            dba.insertValues();
            loadStudents();
            fillComboBox();
            JOptionPane.showMessageDialog(this, "Datei erfolgeich geladen");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Einlesen der .csv Datei");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Einspielen der neuen Daten");
        }
    }//GEN-LAST:event_onLoadFile

    private void onClose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onClose
        try {
            dba.exportToFile();
            dba.tidyUp();
            JOptionPane.showMessageDialog(this, "Daten erfolgreich exportiert. Auf Wiedersehen!");
            System.exit(1);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Auslesen der Daten");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Fehler beim Beschreiben der .csv Dateien");
        }
    }//GEN-LAST:event_onClose

    private void fillComboBox() {
        cbKlassen.removeAllItems();
        grades.keySet().forEach((grade) -> {
            cbKlassen.addItem(grade);
            gradesById.put(grades.get(grade), grade);
        });
    }

    public void loadStudents() throws SQLException {
        grades.clear();
        students.clear();
        studentsByClass.clear();
        System.out.println("call");
        grades = dba.getAllClasses();
        List<String> keys = grades.keySet().stream().collect(Collectors.toList());
        students = dba.getStudents();
        List<Student> temp = new ArrayList<>();
        for (String key : keys) {
            for (Student student : students) {
                if (student.getClassid() == grades.get(key)) {
                    temp.add(student);
                }
            }
            studentsByClass.put(key, temp);
            temp = new ArrayList<>();
        }
        grades.keySet().forEach((grade) -> {
            gradesById.put(grades.get(grade), grade);
        });
        setStudentInfo(studentsByClass.get(keys.get(0)).get(0));
    }

    private void setStudentInfo(Student student) {

        tfCatno.setText(student.getCatno() + "");
        tfClass.setText(gradesById.get(student.getClassid()));
        tfFirstname.setText(student.getFirstname());
        tfSurname.setText(student.getSurname());
        tfDateOfBirth.setText(student.getDateofbirth().format(DTF));
        tfAge.setText(Period.between(student.getDateofbirth(), LocalDate.now()).getYears() + "");

    }

    public void toggleComps(boolean enabled) {
        btFirst.setEnabled(enabled);
        btPrev.setEnabled(enabled);
        btNext.setEnabled(enabled);
        btLast.setEnabled(enabled);
        btImport.setEnabled(enabled);
        btNew.setEnabled(enabled);
        btStop.setEnabled(enabled);
        tfAge.setEnabled(enabled);
        tfCatno.setEnabled(enabled);
        tfClass.setEnabled(enabled);
        tfDateOfBirth.setEnabled(enabled);
        tfFirstname.setEnabled(enabled);
        tfSurname.setEnabled(enabled);
        cbKlassen.setEnabled(enabled);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SchoolAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SchoolAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SchoolAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SchoolAdminGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SchoolAdminGUI().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConnection;
    private javax.swing.JButton btFirst;
    private javax.swing.JButton btImport;
    private javax.swing.JButton btLast;
    private javax.swing.JButton btNew;
    private javax.swing.JButton btNext;
    private javax.swing.JButton btPrev;
    private javax.swing.JButton btStop;
    private javax.swing.JComboBox<String> cbKlassen;
    private javax.swing.JLabel lbAge;
    private javax.swing.JLabel lbCatno;
    private javax.swing.JLabel lbClass;
    private javax.swing.JLabel lbDateOfBirth;
    private javax.swing.JLabel lbFiller;
    private javax.swing.JLabel lbFirstname;
    private javax.swing.JLabel lbKlasse;
    private javax.swing.JLabel lbSurname;
    private javax.swing.JPanel plButtons;
    private javax.swing.JPanel plCombobox;
    private javax.swing.JPanel plInfo;
    private javax.swing.JPanel plMain;
    private javax.swing.JPanel plNav;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfCatno;
    private javax.swing.JTextField tfClass;
    private javax.swing.JTextField tfDateOfBirth;
    private javax.swing.JTextField tfFirstname;
    private javax.swing.JTextField tfSurname;
    // End of variables declaration//GEN-END:variables
}

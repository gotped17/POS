/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import beans.Book;
import beans.Selection;
import db.DB_Access;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;


/**
 *
 * @author Gottl
 */
public class BooksdbGUI extends javax.swing.JFrame {
    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private final DB_Access dba;
    private Map<Integer, String> allPublisher;
    private Map<Integer, String> allGenres;
    private List<String> allAuthors;
    private List<Book> allBooks;
    private Map<Integer, Integer> bookGenres;
    private boolean firstUpdate = true;

    public BooksdbGUI() {
        initComponents();
        dba = DB_Access.getInstance();
        addWindowListener(new ClosingListener());
        customInit();
    }

    private class ClosingListener extends WindowAdapter {

        @Override
        public void windowClosing(WindowEvent evt) {
            System.out.println("Disconnecting from database!");
            dba.disconnect();
            System.out.println("Closing window");
            evt.getWindow().dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bgFilter = new javax.swing.ButtonGroup();
        plSearch = new javax.swing.JPanel();
        lbVerlag = new javax.swing.JLabel();
        lbGenre = new javax.swing.JLabel();
        cbVerlag = new javax.swing.JComboBox<>();
        cbGenre = new javax.swing.JComboBox<>();
        tfSearch = new javax.swing.JTextField();
        rbBook = new javax.swing.JRadioButton();
        rbAuthor = new javax.swing.JRadioButton();
        lbFill = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        liBooks = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        epDetails = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));

        plSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Suchen"));
        plSearch.setLayout(new java.awt.GridBagLayout());

        lbVerlag.setText("Verlag:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 28);
        plSearch.add(lbVerlag, gridBagConstraints);

        lbGenre.setText("Genre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 28);
        plSearch.add(lbGenre, gridBagConstraints);

        cbVerlag.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        cbVerlag.setActionCommand("publisher");
        cbVerlag.setPreferredSize(new java.awt.Dimension(130, 22));
        cbVerlag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onComboboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 70;
        plSearch.add(cbVerlag, gridBagConstraints);

        cbGenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select" }));
        cbGenre.setActionCommand("genre");
        cbGenre.setPreferredSize(new java.awt.Dimension(130, 22));
        cbGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onComboboxChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 70;
        plSearch.add(cbGenre, gridBagConstraints);

        tfSearch.setText("Geben Sie einen Suchbegriff ein . . .");
        tfSearch.setToolTipText("");
        tfSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFilterChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        plSearch.add(tfSearch, gridBagConstraints);

        bgFilter.add(rbBook);
        rbBook.setText("Buch");
        rbBook.setActionCommand("book");
        rbBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFilterChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(17, 0, 0, 0);
        plSearch.add(rbBook, gridBagConstraints);

        bgFilter.add(rbAuthor);
        rbAuthor.setText("Autor");
        rbAuthor.setActionCommand("author");
        rbAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFilterChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(17, 17, 0, 0);
        plSearch.add(rbAuthor, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        plSearch.add(lbFill, gridBagConstraints);

        getContentPane().add(plSearch, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("BÃ¼cher"));
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        liBooks.setBorder(null);
        liBooks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        liBooks.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        liBooks.setPreferredSize(new java.awt.Dimension(280, 113));
        liBooks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                onSelectionChanged(evt);
            }
        });
        jScrollPane1.setViewportView(liBooks);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.LINE_START);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Buchdetails"));

        epDetails.setBorder(null);
        epDetails.setContentType("text/html"); // NOI18N
        epDetails.setPreferredSize(new java.awt.Dimension(400, 39));
        jScrollPane2.setViewportView(epDetails);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customInit() {
        try {
            allPublisher = dba.getPublisher();
            allGenres = dba.getGenres();
            allAuthors = dba.getAuthors();
            bookGenres = dba.getBookGenres();
            List<String> publishers = allPublisher.values().stream().collect(Collectors.toList());

            for (String publisher : publishers) {
                cbVerlag.addItem(publisher);
            }
            List<String> genres = allGenres.values().stream().collect(Collectors.toList());
            for (String genre : genres) {
                cbGenre.addItem(genre);
            }
            allBooks = dba.getBooks();
            String[] booktitles = new String[allBooks.size()];
            for (int i = 0; i < allBooks.size(); i++) {
                booktitles[i] = allBooks.get(i).getTitle();
            }
            liBooks.setListData(booktitles);

        } catch (SQLException ex) {
            Logger.getLogger(BooksdbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void onComboboxChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onComboboxChanged
        if (evt.getActionCommand().equals("publisher")) {

            String publisher = cbVerlag.getSelectedItem().toString();
            int publisherId = 0;
            for (int key : allPublisher.keySet()) {
                if (allPublisher.get(key).equals(publisher)) {
                    publisherId = key;
                    break;
                }
            }

            if (!publisher.equals("select")) {
                updateCombobox(publisherId);
            } else {
                updateCombobox();
            }
        }

        updateList();


    }//GEN-LAST:event_onComboboxChanged

    private void updateList() {

        String publisher = cbVerlag.getSelectedItem() == null ? "select" : cbVerlag.getSelectedItem().toString();
        String genre = cbGenre.getSelectedItem() == null ? "select" : cbGenre.getSelectedItem().toString();
        String query = "SELECT DISTINCT * FROM books b INNER JOIN book_genres bg ON b.book_id = bg.book_id "
                + "INNER JOIN genres g ON bg.genre_id = g.genre_id";

        if (!genre.equals("select") || !publisher.equals("select")) {
            query += " WHERE ";
            if (!publisher.equals("select")) {
                int publisherId = 0;
                for (int key : allPublisher.keySet()) {
                    if (allPublisher.get(key).equals(publisher)) {
                        publisherId = key;
                        break;
                    }
                }
                query += "b.publisher_id = " + publisherId;
            }
            if (!genre.equals("select") && !publisher.equals("select")) {
                query += " AND ";
                int genreId = 0;
                for (int key : allGenres.keySet()) {
                    if (allGenres.get(key).equals(genre)) {
                        genreId = key;
                        break;
                    }
                }
                query += "bg.genre_id = " + genreId;

            } else if (!genre.equals("select")) {
                int genreId = 0;
                for (int key : allGenres.keySet()) {
                    if (allGenres.get(key).equals(genre)) {
                        genreId = key;
                        break;
                    }
                }
                query += "bg.genre_id = " + genreId;
            }
            try {
                List<Book> filteredBooks = dba.getBooksCustom(query);
                Set<String> bookTitlesSet = new HashSet<>();
                String[] booktitles = new String[filteredBooks.size()];
                int cnt = 0;
                for (Book book : filteredBooks) {
                    bookTitlesSet.add(book.getTitle());
                }
                for (String booktitle : bookTitlesSet) {
                    booktitles[cnt] = booktitle;
                    cnt++;
                }
                liBooks.setListData(booktitles);
            } catch (SQLException ex) {
                ex.printStackTrace();
                System.out.println("Error with custom retrieve");
            } catch (RuntimeException ex) {
                JOptionPane.showMessageDialog(this, "Dieser Verlag hat kein Buch mit dem Genre " + genre);
            }

        }
    }

    private void updateCombobox(int publisherId) {

        try {
            List<String> genres = dba.getGenresOfPublisher(publisherId);
            cbGenre.removeAllItems();
            cbGenre.addItem("select");
            Collections.sort(genres);
            for (String genre : genres) {
                cbGenre.addItem(genre);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("An error occured while retrieving the genres of a publisher");
        }
    }

    private void updateCombobox() {
        cbGenre.removeAllItems();
        cbGenre.addItem("select");
        List<String> genres = allGenres.values().stream().collect(Collectors.toList());
        Collections.sort(genres);
        for (String genre : genres) {
            cbGenre.addItem(genre);
        }
    }

    private void onFilterChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onFilterChanged
        JOptionPane.showMessageDialog(this, "Not implemented yet");
    }//GEN-LAST:event_onFilterChanged

    private void onSelectionChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_onSelectionChanged
        String selectedString = liBooks.getSelectedValue();
        Book selectedBook = allBooks.get(0);
        for (Book book: allBooks) {
            if(book.getTitle().equals(selectedString)){
                selectedBook = book;
            }
        }
        updateEditorPane(selectedBook);
    }//GEN-LAST:event_onSelectionChanged

    private void updateEditorPane(Book selectedBook){
        try {
            File template = Paths.get(System.getProperty("user.dir"), "src", "res", "bookDetails.html").toFile();
            BufferedReader br = new BufferedReader(new FileReader(template));
            String templateString = "";
            String line = "";
            String authors = "";
            for(String author : selectedBook.getAuthors()){
                if(authors != ""){
                    authors += "<br>";
                }
                authors += author +"";
            }
            System.out.println(authors);
            while((line=br.readLine()) != null){
                templateString += line;
            }
            String content = MessageFormat.format(templateString,
                    selectedBook.getTitle(),
                    authors,
                    selectedBook.getIsbn() == null ? "-" : selectedBook.getIsbn(),
                    selectedBook.getTotalPages() == 0 ? "-" : selectedBook.getTotalPages(),
                    selectedBook.getGenre() == null ? "-" : selectedBook.getGenre(),
                    selectedBook.getRating() == 0 ? "-" : selectedBook.getRating(),
                    selectedBook.getPublishedDate() == null ? "-" : selectedBook.getPublishedDate().format(DTF),
                    selectedBook.getPublisher() == null ? "-" : selectedBook.getPublisher());
            epDetails.setText(content);
        } catch (IOException ex) {
            Logger.getLogger(BooksdbGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BooksdbGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BooksdbGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BooksdbGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BooksdbGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BooksdbGUI().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgFilter;
    private javax.swing.JComboBox<String> cbGenre;
    private javax.swing.JComboBox<String> cbVerlag;
    private javax.swing.JEditorPane epDetails;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbFill;
    private javax.swing.JLabel lbGenre;
    private javax.swing.JLabel lbVerlag;
    private javax.swing.JList<String> liBooks;
    private javax.swing.JPanel plSearch;
    private javax.swing.JRadioButton rbAuthor;
    private javax.swing.JRadioButton rbBook;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}

package ui;

import beans.Employee;
import bl.EmployeeTableModel;
import database.DB_Access;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javafx.application.Platform;
import javax.swing.SwingUtilities;

public class EmployeeGUI extends javax.swing.JFrame {

    private DB_Access dba;
    private EmployeeTableModel etm;

    public EmployeeGUI() {
        etm = new EmployeeTableModel(new ArrayList<>());
        initComponents();
        taLog.append("Program started. Please connect to the database\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pmEntry = new javax.swing.JPopupMenu();
        miDelete = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbOutput = new javax.swing.JTable();
        plActions = new javax.swing.JPanel();
        btConnect = new javax.swing.JButton();
        btDisconnect = new javax.swing.JButton();
        btAverageF = new javax.swing.JButton();
        btAverageM = new javax.swing.JButton();
        btDept1 = new javax.swing.JButton();
        btDept2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        taLog = new javax.swing.JTextArea();
        mbEmployees = new javax.swing.JMenuBar();
        meFiles = new javax.swing.JMenu();
        miLoadCSV = new javax.swing.JMenuItem();

        miDelete.setText("Delete");
        miDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDelete(evt);
            }
        });
        pmEntry.add(miDelete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbOutput.setModel(etm);
        tbOutput.setComponentPopupMenu(pmEntry);
        tbOutput.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(tbOutput);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        plActions.setLayout(new java.awt.GridLayout(6, 1));

        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onConnect(evt);
            }
        });
        plActions.add(btConnect);

        btDisconnect.setText("Disconnect");
        btDisconnect.setEnabled(false);
        btDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDisconnect(evt);
            }
        });
        plActions.add(btDisconnect);

        btAverageF.setText("Durschnittsgehalt Frauen");
        btAverageF.setEnabled(false);
        btAverageF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAverageF(evt);
            }
        });
        plActions.add(btAverageF);

        btAverageM.setText("Durchschnittsgehalt Männer");
        btAverageM.setEnabled(false);
        btAverageM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onAverageM(evt);
            }
        });
        plActions.add(btAverageM);

        btDept1.setText("Angestellte Abteilung 1");
        btDept1.setEnabled(false);
        btDept1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDept1(evt);
            }
        });
        plActions.add(btDept1);

        btDept2.setText("Angestellte Abteilung 2");
        btDept2.setEnabled(false);
        btDept2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onDept2(evt);
            }
        });
        plActions.add(btDept2);

        getContentPane().add(plActions, java.awt.BorderLayout.LINE_END);

        taLog.setColumns(20);
        taLog.setRows(5);
        jScrollPane2.setViewportView(taLog);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.PAGE_END);

        mbEmployees.setEnabled(false);

        meFiles.setText("File");
        meFiles.setEnabled(false);

        miLoadCSV.setText("Load CSV file");
        miLoadCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onLoad(evt);
            }
        });
        meFiles.add(miLoadCSV);

        mbEmployees.add(meFiles);

        setJMenuBar(mbEmployees);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onConnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onConnect
        taLog.append("Connecting to database . . .\n");
        SwingUtilities.invokeLater(() -> {
            try {
                dba = new DB_Access();
                dba.connect("postgres");
                dba.createDB();
                dba.createTable();
                etm.changeData(dba.getEmployees());
                btConnect.setEnabled(false);
                btDisconnect.setEnabled(true);
                btAverageF.setEnabled(true);
                btAverageM.setEnabled(true);
                btDept1.setEnabled(true);
                btDept2.setEnabled(true);
                mbEmployees.setEnabled(true);
                meFiles.setEnabled(true);
                taLog.append("Connected\n");
            } catch (ClassNotFoundException ex) {
                taLog.append("An error ocoured while trying to load class DB_Access\n");
            } catch (SQLException ex) {
                taLog.append("An error oocured while trying to connect with the database\n");
            } catch (IOException ex) {
                taLog.append("An error occured while loading the project file system\n");
            }
        });

    }//GEN-LAST:event_onConnect

    private void onDisconnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDisconnect
        taLog.append("Disconnecting from database . . .\n");
        SwingUtilities.invokeLater(() -> {
            try {
                dba.disconnect();
                etm.changeData(new ArrayList<>());
                btConnect.setEnabled(true);
                btDisconnect.setEnabled(false);
                btAverageF.setEnabled(false);
                btAverageM.setEnabled(false);
                btDept1.setEnabled(false);
                btDept2.setEnabled(false);
                mbEmployees.setEnabled(false);
                meFiles.setEnabled(false);
                taLog.append("Disconnected\n");
            } catch (SQLException ex) {
                taLog.append("An error occured while disconnecting from the database\n");
            }
        });


    }//GEN-LAST:event_onDisconnect

    private void onAverageF(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAverageF
        taLog.append("Calculating average salary for women . . .\n");

        SwingUtilities.invokeLater(() -> {
            try {
                double value = dba.getAverageSalary('F');
                taLog.append(String.format("The average salary for women is %.2f€\n", value));
            } catch (SQLException ex) {
                Logger.getLogger(EmployeeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_onAverageF

    private void onAverageM(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onAverageM
        taLog.append("Calculating average salary for men . . .\n");

        SwingUtilities.invokeLater(() -> {
            try {
                double value = dba.getAverageSalary('M');
                taLog.append(String.format("The average salary for men is %.2f€\n", value));
            } catch (SQLException ex) {
                Logger.getLogger(EmployeeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }//GEN-LAST:event_onAverageM

    private void onDept1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDept1
        taLog.append("Loading employees for department 1 . . .\n");

        SwingUtilities.invokeLater(() -> {
            try {
                etm.changeData(dba.getEmployeesFromDepartment(1));
                taLog.append(String.format("Selected %d employees working in department 1\n", etm.getRowCount()));
            } catch (SQLException ex) {
                taLog.append("An error occured while trying to retrieve data of department 1\n");
            }
        });
    }//GEN-LAST:event_onDept1

    private void onDept2(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDept2
        taLog.append("Loading employees for department 2 . . .\n");

        SwingUtilities.invokeLater(() -> {
            try {
                etm.changeData(dba.getEmployeesFromDepartment(2));
                taLog.append(String.format("Selected %d employees working in department 2\n", etm.getRowCount()));
            } catch (SQLException ex) {
                taLog.append("An error occured while trying to retrieve data of department 2\n");
            }
        });
    }//GEN-LAST:event_onDept2

    private void onLoad(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLoad
        taLog.append("inserting new employees . . .\n");

        SwingUtilities.invokeLater(() -> {

            try {
                File file = Paths.get(System.getProperty("user.dir") + File.separator + "src" + File.separator + "res" + File.separator + "mitarbeiter.csv").toFile();
                BufferedReader br = new BufferedReader(new FileReader(file));
                List<String> rawValues = br.lines().collect(Collectors.toList());
                List<String[]> splittedValues = new ArrayList<>();
                for (String rawString : rawValues) {
                    splittedValues.add(rawString.split(";"));
                }
                List<Employee> newEmployees = new ArrayList<>();

                for (String[] tokens : splittedValues) {
                    String[] dateParts = tokens[2].split("\\.");

                    LocalDate birthdate = LocalDate.of(Integer.parseInt(dateParts[2]), Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[0]));
                    newEmployees.add(new Employee(0, tokens[0], tokens[1], birthdate, Double.parseDouble(tokens[3].replace(",", ".")),
                            Integer.parseInt(tokens[4]), tokens[5].charAt(0)));
                }
                List<Employee> employees = dba.getEmployees();

                for (Employee employee : employees) {
                    try {
                        for (Employee newEmployee : newEmployees) {

                            if (employee.equals(newEmployee)) {
                                newEmployees.remove(newEmployee);
                            }
                        }
                    } catch (ConcurrentModificationException ex) {
                        taLog.append(String.format("Employee %s, %s already exists in database\n", employee.getName(), employee.getFirstname()));

                    }
                }

                for (Employee newEmployee : newEmployees) {
                    dba.insertEmployee(newEmployee);
                }
                etm.changeData(dba.getEmployees());
                taLog.append("users inserted\n");
            } catch (IOException ex) {
                Logger.getLogger(EmployeeGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(EmployeeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

        });
    }//GEN-LAST:event_onLoad

    private void onDelete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onDelete
        taLog.append("Deleting selected users . . .\n");
        SwingUtilities.invokeLater(() -> {
            int[] selected = tbOutput.getSelectedRows();
            List<Employee> employees = new ArrayList<>();
            for (int i : selected) {
                Object[] select = etm.getSelectedRow(i);
                String[] dateParts = select[3].toString().split("\\.");
                LocalDate birthdate = LocalDate.of(Integer.parseInt(dateParts[2]), Integer.parseInt(dateParts[1]), Integer.parseInt(dateParts[0]));
                employees.add(new Employee(Integer.parseInt(select[0].toString()), select[1].toString(), select[2].toString(), birthdate,
                        Double.parseDouble(select[4].toString()), Integer.parseInt(select[5].toString()), select[6].toString().charAt(0)));
            }
            for (Employee employee : employees) {
                try {
                    dba.removeEmployee(employee);
                    etm.changeData(dba.getEmployees());
                } catch (SQLException ex) {
                    taLog.append("An error occured while trying to delete employee " + employee.getName() + ", " + employee.getFirstname() + "\n");
                }
            }

            taLog.append("Deleted selected users\n");
        });

    }//GEN-LAST:event_onDelete

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAverageF;
    private javax.swing.JButton btAverageM;
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btDept1;
    private javax.swing.JButton btDept2;
    private javax.swing.JButton btDisconnect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuBar mbEmployees;
    private javax.swing.JMenu meFiles;
    private javax.swing.JMenuItem miDelete;
    private javax.swing.JMenuItem miLoadCSV;
    private javax.swing.JPanel plActions;
    private javax.swing.JPopupMenu pmEntry;
    private javax.swing.JTextArea taLog;
    private javax.swing.JTable tbOutput;
    // End of variables declaration//GEN-END:variables
}
